from django.shortcuts import renderfrom django.http import HttpResponsefrom django.template import loaderimport subprocessfrom django.conf import settingsfrom django.http import JsonResponsefrom django.views.decorators.csrf import csrf_exemptimport jsonfrom django.db.models import Countfrom scan.models import PortScanResult import shlexfrom ipaddress import ip_networkimport itertoolsfrom nvds import NVDSearchimport nmap,timeimport ast, requestsimport nvdlibimport urllib3import logginglogger = logging.getLogger(__name__)urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)scan_cache = {}def scan_results(request):    template = loader.get_template('scan_results.html')    return HttpResponse(template.render())def Scan(request):    template = loader.get_template('scan-system.html')    return HttpResponse(template.render())   def Homepage(request):    template = loader.get_template('dashboard.html')    return HttpResponse(template.render())def get_cve_details(cve_id):    result = {}    start_time = time.time()  # Record start time before making the request    try:        # Search for the CVE        cve_info = nvdlib.searchCVE(cveId=cve_id)[0]        # Extract relevant information        result['ID'] = cve_info.id        result['Published'] = cve_info.published        result['Last Modified'] = cve_info.lastModified        result['Vulnerability Status'] = cve_info.vulnStatus        result['Description'] = cve_info.descriptions[0].value        result['CVSS v3 Score'] = cve_info.metrics.cvssMetricV31[0].cvssData.baseScore        result['CVSS v3 Severity'] = cve_info.metrics.cvssMetricV31[0].cvssData.baseSeverity        result['CWE'] = cve_info.weaknesses[0].description[0].value        latency = time.time() - start_time  # Calculate latency        result['Latency'] = round(latency, 2)  # Round latency to two decimal places    except Exception as e:        # Handle exceptions        result['Error'] = str(e)    return result# Cache to store previously scanned hostsscan_cache = {}def scan_host(target_ip):    global scan_cache    scanner = nmap.PortScanner()    # Check if host has already been scanned    if target_ip in scan_cache:        return scan_cache[target_ip]    scan_arguments = '-v -sV -Pn -sT --script=banner --script=vuln'    scan_results = scanner.scan(target_ip, arguments=scan_arguments)    results = []    for host in scan_results['scan']:        host_data = scan_results['scan'][host]        result = {            'host': host,            'status': host_data['status']['state'],            'hostname': host_data['hostnames'][0]['name'] if 'hostnames' in host_data else 'n/a',            'os': host_data['osmatch'][0]['osclass'][0]['osfamily'] if 'osmatch' in host_data else 'n/a',            'open_ports': []        }        for proto in host_data.all_protocols():            lport = host_data[proto].keys()            for port in sorted(lport):                port_data = host_data[proto][port]                if port_data['state'] == 'open':                    port_info = {                        'port': port,                        'status': port_data['state'],                        'service': port_data.get('name', 'n/a'),                        'product': port_data.get('product', 'n/a'),                        'version': port_data.get('version', 'n/a'),                        'extra_info': port_data.get('extrainfo', 'n/a')                    }                    vulnerabilities = port_data.get('script', {}).get('vulners', [])                    if vulnerabilities:                        port_info['vulnerabilities'] = vulnerabilities                    result['open_ports'].append(port_info)        results.append(result)    # Store results in cache    scan_cache[target_ip] = results    return results@csrf_exemptdef script_args(request):    if request.method == 'POST':        ip_address = request.POST.get('ip_address')        # Validate input presence        if not ip_address:            return JsonResponse({'error': 'IP address must be provided'}, status=400)        # Execute scan and process results        try:            start_time = time.time()            result = scan_host(ip_address)            end_time = time.time()            latency = end_time - start_time            print(f"{end_time - start_time:.2f} seconds")  # Print the elapsed time            # Parse results            print("\n\n\nResults: ",len(result),"\n")            results = []            for host in result:                if host['open_ports']:                    for port_info in host['open_ports']:                        results.append({                            'ip': ip_address,                            'port': port_info.get('port', 'n/a'),                            'status': port_info.get('status', 'n/a'),                            'service': port_info.get('service', 'n/a'),                            'product': port_info.get('product', 'n/a'),                            'version': port_info.get('version', 'n/a'),                            'extra_info': port_info.get('extra_info', 'n/a'),                            'vulnerabilities': port_info.get('vulnerabilities', []),                            'time': round(latency,2)                        })            print("\n\n\nFinal results type :\n", type(results))            """            cve_details = []            for host in result:                for port_info in host['open_ports']:                    vulnerabilities = port_info.get('vulnerabilities', [])                    for vulnerability in vulnerabilities:                        cve_id = vulnerability.get('id')                        if cve_id:                            cve_detail = get_cve_details(cve_id)                            cve_details.append(cve_detail)            print("\n\nCVE details:", cve_details)            combined_results = {'scan_results': results, 'cve_details': cve_details}            print ("\n\n\nCombined data: \n\n",combined_results)            """            return JsonResponse({'results': results})        except Exception as e:            return JsonResponse({'error': f'Error: {str(e)}'}, status=500)    else:        return JsonResponse({'error': 'Invalid request method'}, status=405)@csrf_exemptdef vulnerabilit_scan_view(request):    if request.method == 'POST':        try:            data = json.loads(request.body)            ip_address = data.get('ip_address')            if not ip_address:                return JsonResponse({'error': 'IP address must be provided'}, status=400)            # Initiate the scan using nmap            scanner = nmap.PortScanner()            scan_arguments = f'-sV -Pn --script=banner --script=vuln'            scan_results = scanner.scan(ip_address, arguments=scan_arguments)            vulnerabilities = []            print (scan_results)            # Collect data from the first open TCP port (assuming there's at least one)            host_data = scan_results.get('scan', {}).get(ip_address, {})            for port, port_data in host_data.get('tcp', {}).items():                script_data = port_data.get('script', {})                vulners_output = script_data.get('vulners', '')                if vulners_output:                    for line in vulners_output.strip().split('\n'):                        if line.strip():                            parts = line.split('\t')                            if len(parts) >= 3:                                cve_id, cvss_score, url = parts[1], parts[2], parts[3]                                vulnerabilities.append({                                    'cve_id': cve_id.strip(),                                    'cvss_score': cvss_score.strip(),                                    'url': url.strip()                                })            return JsonResponse({'vulnerabilities': vulnerabilities})        except ValueError as e:            return JsonResponse({'error': str(e)}, status=400)        except json.JSONDecodeError:            return JsonResponse({'error': 'Invalid JSON data'}, status=400)        except Exception as e:            return JsonResponse({'error': str(e)}, status=500)    else:        return JsonResponse({'error': 'Invalid request method'}, status=405)def vulnerability_scan_view(request):    if request.method == 'POST':        # Middleware has already attached the scan results to the request        vulnerabilities = getattr(request, 'scan_results', [])                # Check if AJAX request        if request.is_ajax():            # Return JSON response            return JsonResponse({'vulnerabilities': vulnerabilities})        else:            # Render HTML template with vulnerabilities            return render(request, 'vulnerability_scan.html', {'vulnerabilities': vulnerabilities})    else: