from django.http import JsonResponseimport nmapimport jsonclass PortVulnerabilityScanMiddleware:    def __init__(self, get_response):        self.get_response = get_response    def __call__(self, request):        if request.method == 'POST' and request.path == '/vulnerability_scan/':            try:                data = json.loads(request.body)                ip_address = data.get('ip_address')                if not ip_address:                    return JsonResponse({'error': 'IP address must be provided'}, status=400)                # Initiate the scan using nmap                scanner = nmap.PortScanner()                scan_arguments = f'-sV -Pn --script=banner --script=vuln'                scan_results = scanner.scan(ip_address, arguments=scan_arguments)                vulnerabilities = []                # Collect data from open TCP ports                host_data = scan_results.get('scan', {}).get(ip_address, {})                for port, port_data in host_data.get('tcp', {}).items():                    script_data = port_data.get('script', {})                    vulners_output = script_data.get('vulners', '')                    if vulners_output:                        for line in vulners_output.strip().split('\n'):                            if line.strip():                                parts = line.split('\t')                                if len(parts) >= 3:                                    cve_id, cvss_score, url = parts[1], parts[2], parts[3]                                    vulnerabilities.append({                                        'cve_id': cve_id.strip(),                                        'cvss_score': cvss_score.strip(),                                        'url': url.strip()                                    })                # Attach scan results to the request object                request.scan_results = vulnerabilities            except ValueError as e:                return JsonResponse({'error': str(e)}, status=400)            except json.JSONDecodeError:                return JsonResponse({'error': 'Invalid JSON data'}, status=400)            except Exception as e:                return JsonResponse({'error': str(e)}, status=500)        # Pass the request to the next middleware or view